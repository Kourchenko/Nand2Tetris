// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs,
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN
        x[16], y[16],  // 16-bit inputs
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    // Returns 0 if zx == 1
    // returns x if zx == 0
    Mux16(a=x, b=false, sel=zx, out=zx1);
    Mux16(a=y, b=false, sel=zy, out=zy1);

    // Need the opposite of "x" input
    Not16(in=zx1, out=notzx1);
    // Returns the opposite of the input, "zx1"
    // If nx == 1
    // Else returns the original input, "zx1"
    Mux16(a=zx1, b=notzx1, sel=nx, out=znx);


    // Handles "y" input the same as before.
    Not16(in=zy1, out=notzy1);
    Mux16(a=zy1, b=notzy1, sel=ny, out=zny);


    // Computes the result of x&y, just in case it is needed.
    And16(a=znx, b=zny, out=znxnzxy);
    // Computes the result of x+y, just in case it is needed.
    Add16(a=znx, b=zny, out=znxpzxy);
    // If selector bit, "f" == 1, return the addition
    // Which is already calculated.
    // Else return the "AND" of both inputs.
    Mux16(a=znxnzxy, b=znxpzxy, sel=f, out=xy);

    // Do the opposite if 1.
    Not16(in=xy, out=notxy);
    // Use Mux for selector bit, if 1 out is the opposite.
    // Else return the original output.
    Mux16(a=xy, b=notxy, sel=no, out[15]=ng, out[0..7]=out1, out[8..15]=out2, out=out);

    Or8Way(in=out1, out=outor1);
    Or8Way(in=out2, out=outor2);
    Or(a=outor1, b=outor2, out=nonzero);
    Not(in=nonzero, out=zr);

}
